<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Martins Blog</title>
    <link>https://mortbauer.github.io/post/</link>
    <description>Recent content in Posts on Martins Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 May 2019 21:09:00 +0200</lastBuildDate>
    
	<atom:link href="https://mortbauer.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sops</title>
      <link>https://mortbauer.github.io/post/sops/</link>
      <pubDate>Wed, 29 May 2019 21:09:00 +0200</pubDate>
      
      <guid>https://mortbauer.github.io/post/sops/</guid>
      <description>Intro to sops This is just a very quick intro to sops an open sourced secrets management tool from mozilla.
Sops can be used to transparently encrypt full, or partially config files, transparently in the sense that the keys in a yaml, json won&amp;rsquo;t be encrypted only the values, which allows to version control the file with git and more.
To create an with your gpg key &amp;lsquo;encrypted&amp;rsquo; file run:</description>
    </item>
    
    <item>
      <title>Systemd Nspawn Raspbian</title>
      <link>https://mortbauer.github.io/post/systemd-nspawn-raspbian/</link>
      <pubDate>Thu, 12 Jul 2018 23:30:42 +0200</pubDate>
      
      <guid>https://mortbauer.github.io/post/systemd-nspawn-raspbian/</guid>
      <description>use systemd-nspawn to boot raspbian image The setup is a bit tricky and some things might have to be changed, but it should basically work.
 setup the loopback devive using: loosetup -f -P &amp;lt;path_to_img&amp;gt;.img as root and lets assume the output is /dev/loop1. make sure you have the prerequistes:   qemu-user-static binfmt-support   run sudo update-binfmts --enable qemu-arm or something similar create a mount point, lets assume mnt in the current directory mount the image mount /dev/loop1p1 mnt try to start a chroot using systemd-nspawn --bind /lib64 --bind /usr/bin/qemu-arm-static -D mnt /bin/bash as root.</description>
    </item>
    
  </channel>
</rss>